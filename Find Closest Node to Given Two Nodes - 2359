class Solution {
public:
    void path(int i, int dist, vector<int>& edges, vector<int>& paths) {
        if(i!=-1 && paths[i]==-1) {
            paths[i] = dist;
            path(edges[i], dist+1, edges, paths);
        }
    }
    int closestMeetingNode(vector<int>& edges, int node1, int node2) {
        int ans=-1;
        int minDist = INT_MAX;
        int n=edges.size();

        vector<int>path1(n,-1), path2(n,-1);

        path(node1, 0, edges, path1);
        path(node2, 0, edges, path2);

        for(int i=0;i<n;i++) {
            if(min(path1[i], path2[i]) >=0 && max(path1[i],path2[i]) < minDist) {
                minDist = max(path1[i], path2[i]);
                ans=i;
            }
        }
        return ans;
    }
};
